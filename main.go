// generated by gocipe; DO NOT EDIT

package main

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/mscraftsman/devcon-feedback/config"
	"github.com/mscraftsman/devcon-feedback/sessionize"
	"github.com/mscraftsman/devcon-feedback/store"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/mscraftsman/devcon-feedback/controllers"
	"github.com/mscraftsman/devcon-feedback/meetup"
)

// Version info
var (
	appVersion = "n/a"
	appCommit  = "n/a"
	appBuilt   = "n/a"
)

func main() {
	version := flag.Bool("v", false, "prints current app version")
	flag.Parse()
	if *version {
		fmt.Printf("Version: %s \nCommit: %s \nBuilt: %s", appVersion, appCommit, appBuilt)
		os.Exit(0)
	}

	config.Load()
	sessionize.LoadSessions()
	store.Init()

	router := mux.NewRouter()
	router.Path("login").Methods(http.MethodGet).HandlerFunc(meetup.Login)
	router.Path("meetup").Methods(http.MethodGet).HandlerFunc(meetup.LoginCallback)

	apiSubRoute := router.PathPrefix("/api").Subrouter()
	apiSubRoute.Path("/me").Methods(http.MethodGet).HandlerFunc(controllers.Me)
	apiSubRoute.Path("/bookmarks").Methods(http.MethodPost).HandlerFunc(controllers.AddBookmark)
	apiSubRoute.Path("/bookmarks").Methods(http.MethodGet).HandlerFunc(controllers.ListBookmarks)
	apiSubRoute.Path("/bookmarks/{id}").Methods(http.MethodDelete).HandlerFunc(controllers.RemoveBookmark)
	apiSubRoute.Path("/feedbacks").Methods(http.MethodPost).HandlerFunc(controllers.AddFeedback)
	apiSubRoute.Path("/feedbacks/me").Methods(http.MethodGet).HandlerFunc(controllers.ListOwnFeedback)

	http.ListenAndServe(":"+config.HTTPPort, handlers.CORS()(router))
}
