// generated by gocipe; DO NOT EDIT

syntax = "proto3";

package data;

option go_package = "github.com/mscraftsman/devcon-feedback/services/data";

import "models.proto";
import "service_admin.proto";
import "google/protobuf/timestamp.proto";

// --------------------
// Generic requests ---
// --------------------

// GetByIDRequest represents a request to allow getting a single entity by ID
message GetByIDRequest {
    string Key = 1;
    string ID = 2;
}

// GetBySlugRequest represents a request to allow getting a single entity by slug
message GetBySlugRequest {
    string Key = 1;
    string Slug = 2;
}

// ListRequest represents a request to allow listing of entities
message ListRequest {
    string Key = 1;
    models.ListOpts ListOpts = 2;
    repeated admin.Filter Filters = 3;
}

// --------------------
// GetModified Response
// --------------------

// TimestampResponse
message TimestampResponse {
    google.protobuf.Timestamp ModifiedAt = 1;
}

// --------------------
// Entity Responses ---
// --------------------

// FeedbackResponse represents result to a GetByIDRequest or GetBySlugRequest
message FeedbackResponse {
    models.Feedback Feedback = 1;
}

// ListFeedbacksResponse represents result to a ListRequest
message ListFeedbacksResponse {
    repeated models.Feedback Feedbacks = 1;
}

// VisitorResponse represents result to a GetByIDRequest or GetBySlugRequest
message VisitorResponse {
    models.Visitor Visitor = 1;
}

// ListVisitorsResponse represents result to a ListRequest
message ListVisitorsResponse {
    repeated models.Visitor Visitors = 1;
}

// RatingResponse represents result to a GetByIDRequest or GetBySlugRequest
message RatingResponse {
    models.Rating Rating = 1;
}

// ListRatingsResponse represents result to a ListRequest
message ListRatingsResponse {
    repeated models.Rating Ratings = 1;
}

// -------------------
// Decks and cards ---
// -------------------

// DeckRequest is a request to get cards for decks
message DeckRequest {
    string Key = 1;
    repeated string Decks = 2;
}

// DeckContentResponse returns a list of cards for each decks in DeckRequest
message DeckContentResponse {
    repeated DeckContent DeckContents = 1;
}

// DeckContent contains a list of card references
message DeckContent {
   string   Name = 1;
   repeated CardReference CardRefs = 2;
}

// CardReference contains reference to an entity's type and ID
message CardReference {
    string Type = 1;
    string ID = 2;
}

// GRPC service Data
service Data {

    // GetFeedbackByID returns a single Feedback from database by primary key
    rpc GetFeedbackByID(GetByIDRequest) returns (FeedbackResponse);
    // ListFeedbacks allows listing all entity of type Feedback
    rpc ListFeedbacks(ListRequest) returns (ListFeedbacksResponse);

    // GetVisitorByID returns a single Visitor from database by primary key
    rpc GetVisitorByID(GetByIDRequest) returns (VisitorResponse);
    // ListVisitors allows listing all entity of type Visitor
    rpc ListVisitors(ListRequest) returns (ListVisitorsResponse);

    // GetRatingByID returns a single Rating from database by primary key
    rpc GetRatingByID(GetByIDRequest) returns (RatingResponse);// GetModifiedRatingByID returns time of modification for entity by ID
    rpc GetModifiedRatingByID(GetByIDRequest) returns (TimestampResponse);
    
    // ListRatings allows listing all entity of type Rating
    rpc ListRatings(ListRequest) returns (ListRatingsResponse);
}